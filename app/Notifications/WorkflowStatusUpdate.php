<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;
use App\Models\User;

class WorkflowStatusUpdate extends Notification
{
    use Queueable;

    protected $workflowType;
    protected $action;
    protected $status;
    protected $actor;

    /**
     * Create a new notification instance.
     */
    public function __construct(string $workflowType, string $action, string $status, User $actor)
    {
        $this->workflowType = $workflowType;
        $this->action = $action;
        $this->status = $status;
        $this->actor = $actor;
    }

    /**
     * Get the notification's delivery channels.
     *
     * @return array<int, string>
     */
    public function via(object $notifiable): array
    {
        return ['database', 'mail'];
    }

    /**
     * Get the mail representation of the notification.
     */
    public function toMail(object $notifiable): MailMessage
    {
        $workflowName = $this->workflowType === 'synopsis' ? 'Synopsis' : 'Registration Form';
        $actionText = $this->getActionText();
        
        return (new MailMessage)
                    ->subject("{$workflowName} Status Update")
                    ->greeting("Hello {$notifiable->first_name},")
                    ->line("Your {$workflowName} has been {$actionText} by {$this->actor->first_name} {$this->actor->last_name}.")
                    ->line("Current Status: {$this->getStatusText()}")
                    ->action('View Details', url('/dashboard'))
                    ->line('Thank you for using our system!');
    }

    /**
     * Get the array representation of the notification.
     *
     * @return array<string, mixed>
     */
    public function toArray(object $notifiable): array
    {
        return [
            'workflow_type' => $this->workflowType,
            'action' => $this->action,
            'status' => $this->status,
            'actor_id' => $this->actor->id,
            'actor_name' => $this->actor->first_name . ' ' . $this->actor->last_name,
            'actor_type' => $this->actor->user_type,
            'message' => $this->getMessage(),
            'timestamp' => now(),
        ];
    }

    /**
     * Get action text for display
     */
    private function getActionText(): string
    {
        return match($this->action) {
            'supervisor_approve' => 'approved by supervisor',
            'supervisor_reject' => 'rejected by supervisor',
            'hod_approve' => 'approved by HOD',
            'hod_reject' => 'rejected by HOD',
            'da_approve' => 'approved by Dean Assistant',
            'da_reject' => 'rejected by Dean Assistant',
            'so_approve' => 'approved by Section Officer',
            'so_reject' => 'rejected by Section Officer',
            'ar_approve' => 'approved by Assistant Registrar',
            'ar_reject' => 'rejected by Assistant Registrar',
            'dr_approve' => 'approved by Deputy Registrar',
            'dr_reject' => 'rejected by Deputy Registrar',
            'hvc_approve' => 'approved by HVC',
            'hvc_reject' => 'rejected by HVC',
            'da_generate' => 'generated by Dean Assistant',
            'dr_sign' => 'signed by Deputy Registrar',
            'ar_sign' => 'signed by Assistant Registrar',
            'complete' => 'completed',
            'pending_approval' => 'requires your approval',
            default => 'updated'
        };
    }

    /**
     * Get status text for display
     */
    private function getStatusText(): string
    {
        return match($this->status) {
            'pending_supervisor_approval' => 'Pending Supervisor Approval',
            'pending_hod_approval' => 'Pending HOD Approval',
            'pending_da_approval' => 'Pending Dean Assistant Approval',
            'pending_so_approval' => 'Pending Section Officer Approval',
            'pending_ar_approval' => 'Pending Assistant Registrar Approval',
            'pending_dr_approval' => 'Pending Deputy Registrar Approval',
            'pending_hvc_approval' => 'Pending HVC Approval',
            'approved' => 'Approved',
            'rejected_by_supervisor' => 'Rejected by Supervisor',
            'rejected_by_hod' => 'Rejected by HOD',
            'rejected_by_da' => 'Rejected by Dean Assistant',
            'rejected_by_so' => 'Rejected by Section Officer',
            'rejected_by_ar' => 'Rejected by Assistant Registrar',
            'rejected_by_dr' => 'Rejected by Deputy Registrar',
            'rejected_by_hvc' => 'Rejected by HVC',
            'supervisor_approved' => 'Supervisor Approved',
            'generated' => 'Generated',
            'signed_by_dr' => 'Signed by DR',
            'signed_by_ar' => 'Signed by AR',
            'completed' => 'Completed',
            default => ucfirst(str_replace('_', ' ', $this->status))
        };
    }

    /**
     * Get notification message
     */
    private function getMessage(): string
    {
        $workflowName = $this->workflowType === 'synopsis' ? 'Synopsis' : 'Registration Form';
        $actionText = $this->getActionText();
        
        return "Your {$workflowName} has been {$actionText}. Current Status: {$this->getStatusText()}";
    }
}
